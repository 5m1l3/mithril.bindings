{"name":"Mithril.bindings","tagline":"Two way automatic bindings for mithril","body":"# mithril.bindings\r\n\r\nThese bindings differ from the normal mithril bindings in so far as the value binding is bi-directional by default, so if you change the value the model, it will automatically update the bound field, and we have a more rich properties model.\r\n\r\n    var app = {\r\n        model: function(name) {\r\n            this.name = m.p(name);\r\n        },\r\n        view: function(c) {\r\n            return [\r\n                m.e(\"input\", { name: \"name\", value: c.model.name }),\r\n                m.e(\"div\", \"Hello \" + c.model.name()),\r\n                m.e(\"button\", { onclick: c.setName }, \"Set name via model\")\r\n            ];\r\n        },\r\n        controller: function() {\r\n            var self = this;\r\n            self.model = new app.model(\"world\");\r\n            self.setName = function() {\r\n                self.model.name(\"Dave\");\r\n            }\r\n        }\r\n    };\r\n\r\n## Elements\r\n\r\nWe have had to add a new elements creation mechanism, as the Mithril core is not flexible enough to be able to override the standard way it creates elements, (which is required to create seamless bi-directional binding), so we use:\r\n\r\n    `m.e(...)`\r\n\r\ninstead of:\r\n\r\n    `m(...)`\r\n\r\nThe usage signature is identical to Mithril's\r\n\r\n\r\n## Properties\r\n\r\nWe have added a new property creation mechanism, so we use:\r\n\r\n    `m.p(...)`\r\n\r\ninstead of:\r\n\r\n    `m.prop(...)`\r\n\r\nThe usage signature is identical to the original Mithril `prop` model, with the additional functionality:\r\n\r\n### Subscribe\r\n\r\n    `m.p(...).subscribe(function)`\r\n\r\nThis will execute `function` each time the value of the property changes (works with basic values)\r\n\r\n### Delay\r\n\r\n    `m.p(...).delay(bool)`\r\n\r\nThis will delay automatic rendering, so that you can manually trigger it using `m.startCmputation` and `m.endComputation`.\r\n\r\n### Push on arrays\r\n\r\n    `m.p(...).push(value)`\r\n\r\nIf the underlying property value is an array, you can push values to it.\r\n\r\n\r\n## Getting started\r\n\r\nSimply include `mithril.js` and then `mithril.bindings.js` afterwards\r\n\r\n    <script src=\"mithril.js\">\r\n    <script src=\"mithril.bindings.js\">\r\n\r\n\r\n## Examples\r\n\r\nWith these bindings you can do things like:\r\n\r\nTwo-way binding by default:\r\n\r\n    m.e(\"input\", { name: \"name\", value: u.name })\r\n\r\nToggle a boolean attribute on click:\r\n\r\n    m.e(\"button\", { type: \"button\", toggle: u.hide }, \"Toggle hide\")\r\n\r\nHide an element easily (without manually settings the style attribute):\r\n\r\n    m.e(\"div\", { hide: u.hide })\r\n\r\nSee the /examples directory for more examples!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}